import pygame

class Manette:
    def __init__(self):
        pygame.joystick.init()
        self.joystick = None
        self.previous_buttons = []
        self.previous_dpad = (0, 0)
        if pygame.joystick.get_count() > 0:
            self.joystick = pygame.joystick.Joystick(0)
            self.joystick.init()
            self.previous_buttons = [0] * self.joystick.get_numbuttons()
        else:
            print("⚠️ Aucune manette détectée !")
    
    def get_dpad(self):
        if self.joystick:
            return self.joystick.get_hat(0)  # Retourne (x, y) de la croix directionnelle
        return (0, 0)
    
    def get_buttons(self):
        if self.joystick:
            return [self.joystick.get_button(i) for i in range(self.joystick.get_numbuttons())]
        return []
    
    def get_button_pressed(self):
        current_buttons = self.get_buttons()
        pressed_buttons = [i for i in range(len(current_buttons)) if current_buttons[i] and not self.previous_buttons[i]]
        self.previous_buttons = current_buttons
        return pressed_buttons
    
    def get_dpad_pressed(self):
        current_dpad = self.get_dpad()
        pressed_dpad = (current_dpad[0] if current_dpad[0] != self.previous_dpad[0] else 0,
                        current_dpad[1] if current_dpad[1] != self.previous_dpad[1] else 0)
        self.previous_dpad = current_dpad
        return pressed_dpad

class SousInterface:
    def __init__(self, parent=None):
        self.parent = parent
        self.children = []
        self.active_child = None
        self.running = True
    
    def add_child(self, child):
        self.children.append(child)
    
    def set_active_child(self, child):
        self.active_child = child
    
    def handle_events(self, manette):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
        
        if self.active_child:
            self.active_child.handle_events(manette)
    
    def on_select(self):
        pass
    
    def render(self, screen):
        if self.active_child:
            self.active_child.render(screen)

class OptionsMenu(SousInterface):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.options = ["Son", "Graphismes", "Retour"]
        self.selected_index = 0
    
    def handle_events(self, manette):
        super().handle_events(manette)
        dpad_x, dpad_y = manette.get_dpad_pressed()
        buttons = manette.get_button_pressed()
        
        if dpad_y == 1:
            self.selected_index = (self.selected_index - 1) % len(self.options)
        elif dpad_y == -1:
            self.selected_index = (self.selected_index + 1) % len(self.options)
        
        if 0 in buttons:  # Bouton A
            self.on_select()
    
    def on_select(self):
        selected_option = self.options[self.selected_index]
        print(f"Option sélectionnée: {selected_option}")
        if selected_option == "Retour" and self.parent:
            self.parent.set_active_child(None)
    
    def render(self, screen):
        screen.fill((50, 50, 50))
        font = pygame.font.Font(None, 50)
        for i, option in enumerate(self.options):
            color = (200, 200, 0) if i == self.selected_index else (255, 255, 255)
            text_surface = font.render(option, True, color)
            text_rect = text_surface.get_rect(center=(400, 200 + i * 60))
            screen.blit(text_surface, text_rect)
        pygame.display.flip()

class MenuPrincipal(SousInterface):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.options = ["Jouer", "Options", "Quitter"]
        self.selected_index = 0
        self.options_menu = OptionsMenu(self)
        self.add_child(self.options_menu)
    
    def handle_events(self, manette):
        if self.active_child:
            self.active_child.handle_events(manette)
            return
        
        super().handle_events(manette)
        dpad_x, dpad_y = manette.get_dpad_pressed()
        buttons = manette.get_button_pressed()
        
        if dpad_y == 1:
            self.selected_index = (self.selected_index - 1) % len(self.options)
        elif dpad_y == -1:
            self.selected_index = (self.selected_index + 1) % len(self.options)
        
        if 0 in buttons:  # Bouton A
            self.on_select()
    
    def on_select(self):
        selected_option = self.options[self.selected_index]
        print(f"Option sélectionnée: {selected_option}")
        if selected_option == "Options":
            self.set_active_child(self.options_menu)
        elif selected_option == "Quitter" and self.parent:
            self.parent.running = False
    
    def render(self, screen):
        if self.active_child:
            self.active_child.render(screen)
            return
        
        screen.fill((30, 30, 30))
        font = pygame.font.Font(None, 50)
        for i, option in enumerate(self.options):
            color = (200, 200, 0) if i == self.selected_index else (255, 255, 255)
            text_surface = font.render(option, True, color)
            text_rect = text_surface.get_rect(center=(400, 200 + i * 60))
            screen.blit(text_surface, text_rect)
        pygame.display.flip()

class InterfaceGlobale:
    def __init__(self, width=800, height=600):
        pygame.init()
        self.screen = pygame.display.set_mode((width, height))
        pygame.display.set_caption("Interface Manette")
        
        self.running = True
        self.clock = pygame.time.Clock()
        self.manette = Manette()
        
        self.root_interface = MenuPrincipal(self)
    
    def run(self):
        while self.running:
            self.root_interface.handle_events(self.manette)
            self.root_interface.render(self.screen)
            self.clock.tick(30)
        pygame.quit()

if __name__ == "__main__":
    interface = InterfaceGlobale()
    interface.run()